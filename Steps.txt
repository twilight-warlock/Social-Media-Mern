- Installed dependencies and started express server

===

- Created a folder called config and added default,json file to it.
- Added global variable to use mongodb connection link from it
- Created a file called connectToDatabase to use config and mongoose to connect with database 

===

- Created Folder structure for routes
- Generalised routes in app.json

===

- Created User model using Schema and model from mongoose

===

- Initialized Middleware in app.js to accept req.body as json
- Added express validator by using check and validationResult
- Handled validation errors

===

- Minor changes to make code better
- Save the newly created user

===

- Once user is saved, extract it's user.id (_id in mongo) and use it as payload.
- Pass the payload, jwtSecret, optional arguments for expiration time and callback function to jwt.sign to send jwt token

===

- Created middleware for protected routes
- Used middleware to get user id and then use it further to get all user data.

===

- Made a route for user login by verifying token

===

- Profile model created

===

- Learned about populate method to fetch data from multiple collections
- Used the reference in a collection to get data
- Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, a plain object, multiple plain objects, or all objects returned from a query

===

- Joi is better than express validation so use it in next project
- Used the findOneAndUpdate function of mongoose to update pre existing Profile
- Saved new profile if not created

===

- Tried a new folder structure for api
- Haha looks neattt

===

- Added a route to get all profiles, getting a good hang of it

===

- Added a route to get a particular user's profile

===

- Added a route to delete account
- Found a bug on updating profile and fixed it

===

- Added a route to add a new experience to the profile
- Tried joi validation and loved it

===

- Added route to delete a experience using filter method

===

- Added routes to add and delete education

===

- Adde route to add and delete project

===