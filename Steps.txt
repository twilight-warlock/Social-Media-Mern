- Installed dependencies and started express server

===

- Created a folder called config and added default,json file to it.
- Added global variable to use mongodb connection link from it
- Created a file called connectToDatabase to use config and mongoose to connect with database 

===

- Created Folder structure for routes
- Generalised routes in app.json

===

- Created User model using Schema and model from mongoose

===

- Initialized Middleware in app.js to accept req.body as json
- Added express validator by using check and validationResult
- Handled validation errors

===

- Minor changes to make code better
- Save the newly created user

===

- Once user is saved, extract it's user.id (_id in mongo) and use it as payload.
- Pass the payload, jwtSecret, optional arguments for expiration time and callback function to jwt.sign to send jwt token

===

- Created middleware for protected routes
- Used middleware to get user id and then use it further to get all user data.

===

- Made a route for user login by verifying token

===

- Profile model created

===

- Learned about populate method to fetch data from multiple collections
- Used the reference in a collection to get data
- Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, a plain object, multiple plain objects, or all objects returned from a query

===

- Joi is better than express validation so use it in next project
- Used the findOneAndUpdate function of mongoose to update pre existing Profile
- Saved new profile if not created

===

- Tried a new folder structure for api
- Haha looks neattt

===

- Added a route to get all profiles, getting a good hang of it

===

- Added a route to get a particular user's profile

===

- Added a route to delete account
- Found a bug on updating profile and fixed it

===

- Added a route to add a new experience to the profile
- Tried joi validation and loved it

===

- Added route to delete a experience using filter method

===

- Added routes to add and delete education

===

- Adde route to add and delete project

===

- Added route to get user's github repos data

===

- Created a model for posts

===

- Added route to add posts

===

- Added get and delete route for posts

===

- Added route to like and unlike posts

===

- Added route to add and delete comments
- Realized filter won't work here

!===!

- Backend completed and frontend set up done
- Added proxy for not repeating standard http line 
- Used concurrently to work with backend and frontend
- Installed required packages for frontend

===

- Made UI for landing page.

===

- Added UI template

===

- React Router Added along with Link component instead of anchor tags

===

- Added functionality to register form
- Used useState hook along with onChange and onSubmit methods

===

- Added functionality to login form

===

- Added redux store to setup redux
- Added store to provider which encapsulates Router
- Created reducer folder with index.js file to combine all reducers

===

- Added action file for alerts to dispatch alert with required conditions
- Installed uuid package to generate random id
- Added alert to combineReducers object

===

- Adding redux action to a component
- Import and export connect
- Bring in the action(s) required and add it as the second parameter to connect function encased in an object
- Doing the above step would make us the action available as a prop object's key
- To map a redux state to props, we use mapStateToProps so that we can access the data
- Format in mapStateToProps => key : state.ReducerNameFromIndex
- Added alert to app.js
- Added setTimeout to rempveAlert after particular amount of seconds

===

- Using localStorage to save token and state for auth reducer
- If success, set the token and isAuthenticated to true else remove token, set to null and isauthenticated to false
- In Register component, added auth action and called it when client side validation completed

===

- If token exists in localStorage, use it and add it to headers else deletefrom headers of axios request
- Made respective actions and reducers to register and load user data
- Used useEffect hook to componentDidMount token if it already exists in localStorage

===

- If token already exists either after login or register, redirect to /dashboard

===

- Added logout functionality
- Change navbar according to login / logout

===

- Tp commit

===

- useState to create forms
- connect to bring in data from redux state, i.e backend

===

- added onChange
- added actions with a post request which required 3 params: route, data, config(headers)
- To redirect in redux, we use the history object by pulling it in from props after bringing in the withRouter from react-router-dom

===

- added routes and components to edit profile
- Minor changes

===

- Added a component to refactor profile forms

===

- Added actions and reducer to add experience, education and projects

===

- Added experience form and created other form templates

===

- Added education form

===

- Added Project form

===

- Added components to list education and experience

===

- Added projects section along with template each project page

===

- Single page project page

===

- Delete exp, edu, posts and profile actions used to delete all
- Updated route to delete user's posts as profile is deleted

=== 

- Added actions for get all profiles, get profiles by ID and get github repos

===

- Basic template created for getting every user's profile

===

- Created actions, reducers and component for Posts

===

- Added functionality to add and remove likes

===

- Added functionality to remove a comments
- Main functionality completed